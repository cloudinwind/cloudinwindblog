import{_ as e,c as r,a as t,o as n}from"./app-DXtwkRhK.js";const p={};function o(i,a){return n(),r("div",null,a[0]||(a[0]=[t('<h2 id="day5-第三章-哈希表part01" tabindex="-1"><a class="header-anchor" href="#day5-第三章-哈希表part01"><span>Day5 第三章 哈希表part01</span></a></h2><h3 id="今日任务" tabindex="-1"><a class="header-anchor" href="#今日任务"><span>今日任务</span></a></h3><ul><li>哈希表理论基础</li><li>242.有效的字母异位词</li><li>两个数组的交集</li><li>快乐数</li><li>两数之和</li></ul><h3 id="哈希表理论基础" tabindex="-1"><a class="header-anchor" href="#哈希表理论基础"><span>哈希表理论基础</span></a></h3><p>建议：大家要了解哈希表的内部实现原理，哈希函数，哈希碰撞，以及常见哈希表的区别，数组，set 和map。</p><p>什么时候想到用哈希法，<strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。 这句话很重要，大家在做哈希表题目都要思考这句话。</p><p>文章讲解：<a href="https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html" target="_blank" rel="noopener noreferrer">https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html</a></p><h3 id="有效的字母异位词" tabindex="-1"><a class="header-anchor" href="#有效的字母异位词"><span>有效的字母异位词</span></a></h3><p>建议： 这道题目，大家可以感受到 数组 用来做哈希表 给我们带来的遍历之处。</p><p>题目链接/文章讲解/视频讲解： <a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html" target="_blank" rel="noopener noreferrer">https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html</a></p><h3 id="两个数组的交集" tabindex="-1"><a class="header-anchor" href="#两个数组的交集"><span>两个数组的交集</span></a></h3><p>建议：本题就开始考虑 什么时候用set 什么时候用数组，本题其实是使用set的好题，但是后来力扣改了题目描述和 测试用例，添加了 0 &lt;= nums1[i], nums2[i] &lt;= 1000 条件，所以使用数组也可以了，不过建议大家忽略这个条件。 尝试去使用set。</p><p>题目链接/文章讲解/视频讲解：<a href="https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html" target="_blank" rel="noopener noreferrer">https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html</a></p><h3 id="快乐数" tabindex="-1"><a class="header-anchor" href="#快乐数"><span>快乐数</span></a></h3><p>建议：这道题目也是set的应用，其实和上一题差不多，就是 套在快乐数一个壳子</p><p>题目链接/文章讲解：<a href="https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html" target="_blank" rel="noopener noreferrer">https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html</a></p><h3 id="两数之和" tabindex="-1"><a class="header-anchor" href="#两数之和"><span>两数之和</span></a></h3><p>建议：本题虽然是 力扣第一题，但是还是挺难的，也是 代码随想录中 数组，set之后，使用map解决哈希问题的第一题。</p><p>建议大家先看视频讲解，然后尝试自己写代码，在看文章讲解，加深印象。</p><p>题目链接/文章讲解/视频讲解：<a href="https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html" target="_blank" rel="noopener noreferrer">https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html</a></p><h2 id="day6-第三章-哈希表part02" tabindex="-1"><a class="header-anchor" href="#day6-第三章-哈希表part02"><span>Day6 第三章 哈希表part02</span></a></h2><h3 id="今日任务-1" tabindex="-1"><a class="header-anchor" href="#今日任务-1"><span>今日任务</span></a></h3><ul><li>四数相加II</li><li>赎金信</li><li>三数之和</li><li>四数之和</li><li>总结</li></ul><h3 id="四数相加ii" tabindex="-1"><a class="header-anchor" href="#四数相加ii"><span>四数相加II</span></a></h3><p>建议：本题是 使用map 巧妙解决的问题，好好体会一下 哈希法 如何提高程序执行效率，降低时间复杂度，当然使用哈希法 会提高空间复杂度，但一般来说我们都是舍空间 换时间， 工业开发也是这样。 题目链接/文章讲解/视频讲解：https://programmercarl.com/0454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.html</p><h3 id="赎金信" tabindex="-1"><a class="header-anchor" href="#赎金信"><span>赎金信</span></a></h3><p>建议：本题 和 242.有效的字母异位词 是一个思路 ，算是拓展题 题目链接/文章讲解：https://programmercarl.com/0383.%E8%B5%8E%E9%87%91%E4%BF%A1.html</p><h3 id="三数之和" tabindex="-1"><a class="header-anchor" href="#三数之和"><span>三数之和</span></a></h3><p>建议：本题虽然和 两数之和 很像，也能用哈希法，但用哈希法会很麻烦，双指针法才是正解，可以先看视频理解一下 双指针法的思路，文章中讲解的，没问题 哈希法很麻烦。 题目链接/文章讲解/视频讲解：https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html</p><h3 id="四数之和" tabindex="-1"><a class="header-anchor" href="#四数之和"><span>四数之和</span></a></h3><p>建议： 要比较一下，本题和 454.四数相加II 的区别，为什么 454.四数相加II 会简单很多，这个想明白了，对本题理解就深刻了。 本题 思路整体和 三数之和一样的，都是双指针，但写的时候 有很多小细节，需要注意，建议先看视频。 题目链接/文章讲解/视频讲解：https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html</p>',31)]))}const h=e(p,[["render",o],["__file","index.html.vue"]]),s=JSON.parse('{"path":"/review/bb740vrk/","title":"刷题指南_3.哈希表","lang":"zh-CN","frontmatter":{"title":"刷题指南_3.哈希表","createTime":"2025/08/28 11:05:29","permalink":"/review/bb740vrk/","description":"Day5 第三章 哈希表part01 今日任务 哈希表理论基础 242.有效的字母异位词 两个数组的交集 快乐数 两数之和 哈希表理论基础 建议：大家要了解哈希表的内部实现原理，哈希函数，哈希碰撞，以及常见哈希表的区别，数组，set 和map。 什么时候想到用哈希法，当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。 这句话很重要，大...","head":[["meta",{"property":"og:url","content":"https://cloudinwind.github.io/cloudinwindblog/cloudinwindblog/review/bb740vrk/"}],["meta",{"property":"og:site_name","content":"小风"}],["meta",{"property":"og:title","content":"刷题指南_3.哈希表"}],["meta",{"property":"og:description","content":"Day5 第三章 哈希表part01 今日任务 哈希表理论基础 242.有效的字母异位词 两个数组的交集 快乐数 两数之和 哈希表理论基础 建议：大家要了解哈希表的内部实现原理，哈希函数，哈希碰撞，以及常见哈希表的区别，数组，set 和map。 什么时候想到用哈希法，当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。 这句话很重要，大..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-01T17:16:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-01T17:16:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"刷题指南_3.哈希表\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-01T17:16:32.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.41,"words":1022},"git":{"updatedTime":1748798192000,"contributors":[{"name":"cloudinwind","username":"cloudinwind","email":"15729355390@139.com","commits":1,"avatar":"https://avatars.githubusercontent.com/cloudinwind?v=4","url":"https://github.com/cloudinwind"},{"name":"cloudinwind","username":"cloudinwind","email":"cloudinwind@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/cloudinwind?v=4","url":"https://github.com/cloudinwind"}]},"autoDesc":true,"filePathRelative":"notes/review/算法刷题/刷题指南_3.哈希表.md"}');export{h as comp,s as data};
