import{_ as i,c as a,a as n,o as l}from"./app-DXtwkRhK.js";const t={};function h(e,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="海康威视" tabindex="-1"><a class="header-anchor" href="#海康威视"><span>海康威视</span></a></h2><p>2个小时：25道单选+10道多选+2道编程</p><h3 id="第一道-字符串去重" tabindex="-1"><a class="header-anchor" href="#第一道-字符串去重"><span>第一道：字符串去重</span></a></h3><p>编写一个方法，对只有小写字母的字符串进行去重，并保持字母在字符串中首次出现的顺序。 输入描述 输入一串带重复字符的字符串，输出第一次出现的字符的字符串</p><p>输出描述 对只有小写字母的字符串进行去重并输出</p><p>样例输入 hikvision</p><p>样例输出 hikvson</p><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">LinkedHashSet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Scanner</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 创建一个扫描器对象获取输入</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Scanner</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> scanner</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Scanner</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">in</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 获取输入的字符串</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> input</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> scanner</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nextLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 调用去重方法并打印输出</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">removeDuplicates</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">input</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 关闭扫描器</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        scanner</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 去除字符串中的重复字符并保持首次出现顺序</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">removeDuplicates</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 创建一个有序的Set来存储字符，LinkedHashSet保持插入顺序</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Character</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> charSet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> LinkedHashSet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 遍历输入字符串，将每个字符放入set中</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ch</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> input</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toCharArray</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            charSet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 将Set中的字符拼接为字符串</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        StringBuilder</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> StringBuilder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ch</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> charSet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码说明" tabindex="-1"><a class="header-anchor" href="#代码说明"><span>代码说明</span></a></h4><ol><li>使用 <code>LinkedHashSet</code> 保证字符按照插入顺序存储，同时自动去重。</li><li>遍历输入字符串，将每个字符插入 <code>LinkedHashSet</code>，如果字符已经存在，<code>Set</code> 会自动处理重复字符。</li><li>最后将 <code>Set</code> 中的字符拼接成字符串并返回</li></ol><h3 id="第二题-sql-查找" tabindex="-1"><a class="header-anchor" href="#第二题-sql-查找"><span>第二题 SQL 查找</span></a></h3><h4 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h4><p>数据库-每个用户每周的活跃天数</p><p>有如下表 user_login</p><p>date user_id time</p><p>20230101 1 2023-01-01 09:01:00</p><p>20230101 1 2023-01-01 11:02:00</p><p>20230101 2 2023-01-02 10:08:00</p><p>20230102 2 2023-01-02 15:05:00</p><p>求每个用户每周的活跃天数</p><p>输入描述 建表及插入数据</p><p>输出描述 查询结果，userid、第几周、活跃天数</p><p>示例： 样例输入 CREATE TABLE user_login(date DATE,user_id int ,time DATETIME);</p><p>insert into user_login value(&#39;20230101&#39;,1,&#39;2023-01-01 09:01:00&#39;);</p><p>insert into user_login value(&#39;20230101&#39;,1,&#39;2023-01-01 11:02:00&#39;);</p><p>insert into user_login value(&#39;20230102&#39;,2,&#39;2023-01-02 10:08:00&#39;);</p><p>insert into user_login value(&#39;20230102&#39;,3,&#39;2023-01-02 15:05:00&#39;);</p><p>样例输出</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>202301</td><td>1</td></tr><tr><td>2</td><td>202301</td><td>1</td></tr><tr><td>3</td><td>202301</td><td>1</td></tr></tbody></table><h4 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1"><span>代码</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    user_id,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    YEAR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">date</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> FLOOR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">((DAYOFYEAR(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">date</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> week_number,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DISTINCT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> date</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> active_days</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    user_login</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">GROUP BY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    user_id, week_number;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码解释" tabindex="-1"><a class="header-anchor" href="#代码解释"><span>代码解释</span></a></h4><ol><li><p><strong>计算周编号：</strong></p><ul><li><code>YEAR(date)*100</code>：获取日期的年份并乘以 100，以便为周编号预留两位数的位置。</li><li><code>FLOOR((DAYOFYEAR(date)-1)/7)+1</code>：计算日期在一年中的第几周。<code>DAYOFYEAR(date)</code> 获取日期在一年中的第几天，减 1 后除以 7，取整，再加 1 得到周编号。</li><li><strong>组合起来</strong>，<code>YEAR(date)*100 + FLOOR((DAYOFYEAR(date)-1)/7)+1</code> 得到类似 <code>202301</code> 的周编号。</li></ul></li><li><p><strong>计算活跃天数：</strong></p><ul><li><code>COUNT(DISTINCT date)</code>：统计每个用户在该周内登录的不同日期数量。</li></ul></li><li><p><strong>分组：</strong></p><ul><li><code>GROUP BY user_id, week_number</code>：按照用户和周编号分组，计算每个用户每周的活跃天数。</li></ul></li></ol>`,34)]))}const k=i(t,[["render",h],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/review/tfangebo/","title":"海康威视","lang":"zh-CN","frontmatter":{"title":"海康威视","createTime":"2025/02/27 11:19:30","permalink":"/review/tfangebo/","description":"海康威视 2个小时：25道单选+10道多选+2道编程 第一道：字符串去重 编写一个方法，对只有小写字母的字符串进行去重，并保持字母在字符串中首次出现的顺序。 输入描述 输入一串带重复字符的字符串，输出第一次出现的字符的字符串 输出描述 对只有小写字母的字符串进行去重并输出 样例输入 hikvision 样例输出 hikvson 代码 代码说明 使用 L...","head":[["meta",{"property":"og:url","content":"https://cloudinwind.github.io/cloudinwindblog/cloudinwindblog/review/tfangebo/"}],["meta",{"property":"og:site_name","content":"小风"}],["meta",{"property":"og:title","content":"海康威视"}],["meta",{"property":"og:description","content":"海康威视 2个小时：25道单选+10道多选+2道编程 第一道：字符串去重 编写一个方法，对只有小写字母的字符串进行去重，并保持字母在字符串中首次出现的顺序。 输入描述 输入一串带重复字符的字符串，输出第一次出现的字符的字符串 输出描述 对只有小写字母的字符串进行去重并输出 样例输入 hikvision 样例输出 hikvson 代码 代码说明 使用 L..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-01T17:16:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-01T17:16:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"海康威视\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-01T17:16:32.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.55,"words":764},"git":{"updatedTime":1748798192000,"contributors":[{"name":"cloudinwind","username":"cloudinwind","email":"15729355390@139.com","commits":4,"avatar":"https://avatars.githubusercontent.com/cloudinwind?v=4","url":"https://github.com/cloudinwind"},{"name":"cloudinwind","username":"cloudinwind","email":"cloudinwind@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/cloudinwind?v=4","url":"https://github.com/cloudinwind"}]},"autoDesc":true,"filePathRelative":"notes/review/秋招经验/海康威视.md"}');export{k as comp,d as data};
