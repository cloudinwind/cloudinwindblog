import{_ as s,c as e,a,o as t}from"./app-DXtwkRhK.js";const n={};function l(d,i){return t(),e("div",null,i[0]||(i[0]=[a(`<blockquote><p>proxifier 是一种代理软件，外网可以通过该软件访问内网服务器，实验室的服务器使用的都是内网，因此外网访问必须使用 proxifier</p></blockquote><blockquote><p>以下适用于windows</p></blockquote><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p>双击发给你的 exe 文件完成安装</p><h2 id="配置文件导入" tabindex="-1"><a class="header-anchor" href="#配置文件导入"><span>配置文件导入</span></a></h2><p>文件-&gt;导入配置文件</p><blockquote><p>快捷键：Ctrl + O</p></blockquote><p>选择发给你的 <code>milab_20220224.ppx</code> 导入</p><h2 id="配置代理服务器" tabindex="-1"><a class="header-anchor" href="#配置代理服务器"><span>配置代理服务器</span></a></h2><p>1.配置文件-&gt;代理服务器</p><p><img src="https://raw.githubusercontent.com/cloudinwind/images/main/markdown_images/202408251119645.png" alt=""></p><p>2.如果有相关代理点击 <strong>编辑</strong>， 没有点击 <strong>添加</strong></p><p><img src="https://raw.githubusercontent.com/cloudinwind/images/main/markdown_images/202408251121121.png" alt=""></p><p>3.配置代理服务器</p><p><img src="https://raw.githubusercontent.com/cloudinwind/images/main/markdown_images/202408251122829.png" alt=""></p><p>服务器地址：47.108.191.141 端口：9095, 9096, 9075</p><p>用户名：deeprt<br> 密码: Milab2020.</p><blockquote><p>小心密码最后的点</p></blockquote><p>然后点击检查，如果 <strong>测试通过</strong>，说明配置正确，可以正常连接。</p><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h2><p>如果ssh连接服务器失败，先看看是不是proxifier的代理出现了问题，出现 <strong>测试失败</strong> 的情况（一般来说往往是这样的），并依次尝试三个端口，如果还是 <strong>测试失败</strong>，可以私聊我。</p><h1 id="_2-服务器连接" tabindex="-1"><a class="header-anchor" href="#_2-服务器连接"><span>2. 服务器连接</span></a></h1><blockquote><p>windows 下推荐使用 vscode</p></blockquote><p>vscode 中 最上面菜单栏 <strong>终端 -&gt; 新建终端</strong> (如果是英文，<strong>Terminal -&gt; New Terminal</strong>)</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ssh</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> user@ip地址</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>user：用户名 password：密码</p><blockquote><p>之前说的用户名和密码</p></blockquote><h1 id="_3-docker-容器配置" tabindex="-1"><a class="header-anchor" href="#_3-docker-容器配置"><span>3. docker 容器配置</span></a></h1><blockquote><p>docker 其实相当于一个虚拟机</p></blockquote><h2 id="创建属于自己的-docker-容器" tabindex="-1"><a class="header-anchor" href="#创建属于自己的-docker-容器"><span>创建属于自己的 docker 容器</span></a></h2><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> host</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --ipc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> host</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name=容器名称</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /ssd/工作目录</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">:/root/workspace</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /ssd/数据目录:/root/dataspace</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --privileged=true</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/nvidiactl</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/nvidia-uvm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/nvidia0</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/nvidia1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker_image:version</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数讲解：</p><ul><li><code> --network host --ipc host</code> : 容器共享本机的 网络和端口号</li><li><code>--name=container_name</code> : 容器名称(之后进入容器需要使用名称)</li><li><code>-v ~/docker_workspace:/root/workspace</code> : 将本地的 <code>~/docker_workspace</code> 映射到 容器中的 <code>/root/woorkspace</code> 路径下</li><li><code>--privileged=true --device /dev/nvidiactl --device /dev/nvidia-uvm --device /dev/nvidia0</code> : 允许容器使用本机的 GPU 0</li><li><code>docker_image:version</code> : 使用的 docker 镜像，推荐使用 <code>hujunjie/pytorch:latest</code> (docker容器是基于镜像创建的)</li></ul><p>如果报错： <code>Got permission denied while trying to connect to the Docker daemon socket at unix:/</code> 则执行下面的命令：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gpasswd</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> username</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 将普通用户username加入到docker组中  </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">newgrp</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 更新docker组</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建容器，并且容器中端口和本机端口进行映射(更推荐上面的共享本机网络和端口)：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 端口映射​</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name=pytorch_yzh_cltr_ubuntu</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /ssd/yangzhaohui_workspace:/root/workspace</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --privileged=true</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/nvidiactl</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/nvidia-uvm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/nvidia0</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/nvidia1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8086:22</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ubuntu:22.04</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /bin/bash​</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-容器环境配置" tabindex="-1"><a class="header-anchor" href="#docker-容器环境配置"><span>docker 容器环境配置</span></a></h2><p>进入docker容器：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 容器名</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装 cuda 驱动：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 需要有后面的 -s --no-kernel-module</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./NVIDIA-Linux-x86_64-510.54.run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -s</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --no-kernel-module</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试驱动是否正常：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nvidia-smi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/cloudinwind/images/main/markdown_images/202408251156236.png" alt=""></p><p>需要掌握的 docker 命令： <code>docker images</code> : 查看本地的镜像 <code>docker ps</code> : 查看本地运行的容器 <code>docker ps -a</code>: 查看本地的所有容器（包括未运行的容器） <code>docker start 容器名</code> ：启动容器 <code>docker stop 容器名</code> : 关闭容器 <code>docker exec -it 容器名 bash</code> : 进入容器（需要先启动） <code>docker rm 容器名或容器ID</code> ： 删除容器（需要先关闭） <code>docker rmi 镜像或镜像ID</code> ：删除镜像</p><h1 id="编程环境配置" tabindex="-1"><a class="header-anchor" href="#编程环境配置"><span>编程环境配置</span></a></h1><blockquote><p>是指在docker容器中的环境配置，容器中已经集成了conda，更建议对于不同的项目创建不同的conda虚拟环境</p></blockquote><h2 id="conda-虚拟环境" tabindex="-1"><a class="header-anchor" href="#conda-虚拟环境"><span>conda 虚拟环境</span></a></h2><h2 id="pytorch-安装" tabindex="-1"><a class="header-anchor" href="#pytorch-安装"><span>pytorch 安装：</span></a></h2><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">conda</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pytorch==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1.11.0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> torchvision==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.12.0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> torchaudio==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.11.0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cudatoolkit=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">11.3</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pytorch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="jupyter-lab配置" tabindex="-1"><a class="header-anchor" href="#jupyter-lab配置"><span>jupyter lab配置：</span></a></h2><p>容器中已经集成 jupyter lab</p><p>设置 jupyter lab 密码：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">jupyter</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> lab</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> password</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动 jupyter lab:</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">jupyter</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> lab</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --ip=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --port=端口</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --allow-root</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从而可以在浏览器通过 http://服务器ip地址:端口号访问</p>`,58)]))}const p=s(n,[["render",l],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/posts/wutpnx8c/","title":"环境配置全过程","lang":"zh-CN","frontmatter":{"title":"环境配置全过程","slug":"huan-jing-pei-zhi","cover":"https://gcore.jsdelivr.net/gh/cloudinwind/images@main/markdown_images/20240825121254714.webp","categories":["环境部署"],"tags":["环境部署","服务器"],"halo":{"site":"http://119.3.239.131:8080","name":"f6cd28b2-a4c1-4cf2-b5a5-f8f2ebcb35fa","publish":true},"createTime":"2025/02/27 11:33:07","permalink":"/posts/wutpnx8c/","description":"proxifier 是一种代理软件，外网可以通过该软件访问内网服务器，实验室的服务器使用的都是内网，因此外网访问必须使用 proxifier 以下适用于windows 安装 双击发给你的 exe 文件完成安装 配置文件导入 文件->导入配置文件 快捷键：Ctrl + O 选择发给你的 milab_20220224.ppx 导入 配置代理服务器 1.配置...","head":[["meta",{"property":"og:url","content":"https://cloudinwind.github.io/cloudinwindblog/cloudinwindblog/posts/wutpnx8c/"}],["meta",{"property":"og:site_name","content":"小风"}],["meta",{"property":"og:title","content":"环境配置全过程"}],["meta",{"property":"og:description","content":"proxifier 是一种代理软件，外网可以通过该软件访问内网服务器，实验室的服务器使用的都是内网，因此外网访问必须使用 proxifier 以下适用于windows 安装 双击发给你的 exe 文件完成安装 配置文件导入 文件->导入配置文件 快捷键：Ctrl + O 选择发给你的 milab_20220224.ppx 导入 配置代理服务器 1.配置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gcore.jsdelivr.net/gh/cloudinwind/images@main/markdown_images/20240825121254714.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-01T17:16:32.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://gcore.jsdelivr.net/gh/cloudinwind/images@main/markdown_images/20240825121254714.webp"}],["meta",{"name":"twitter:image:alt","content":"环境配置全过程"}],["meta",{"property":"article:tag","content":"环境部署"}],["meta",{"property":"article:tag","content":"服务器"}],["meta",{"property":"article:modified_time","content":"2025-06-01T17:16:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"环境配置全过程\\",\\"image\\":[\\"https://raw.githubusercontent.com/cloudinwind/images/main/markdown_images/202408251119645.png\\",\\"https://raw.githubusercontent.com/cloudinwind/images/main/markdown_images/202408251121121.png\\",\\"https://raw.githubusercontent.com/cloudinwind/images/main/markdown_images/202408251122829.png\\",\\"https://raw.githubusercontent.com/cloudinwind/images/main/markdown_images/202408251156236.png\\"],\\"dateModified\\":\\"2025-06-01T17:16:32.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.19,"words":958},"git":{"updatedTime":1748798192000,"contributors":[{"name":"cloudinwind","username":"cloudinwind","email":"15729355390@139.com","commits":8,"avatar":"https://avatars.githubusercontent.com/cloudinwind?v=4","url":"https://github.com/cloudinwind"},{"name":"cloudinwind","username":"cloudinwind","email":"cloudinwind@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/cloudinwind?v=4","url":"https://github.com/cloudinwind"}]},"autoDesc":true,"filePathRelative":"work/环境配置全过程.md","categoryList":[{"id":"67e92c","sort":10000,"name":"work"}]}');export{p as comp,h as data};
